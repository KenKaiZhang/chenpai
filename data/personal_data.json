[
  {
    "instruction": "Tell me about a challenging technical problem you've faced. How did you approach it, what was the outcome, and what did you learn?",
    "response": "The biggest technical challenge I've faced is from learning the tools and processes that different companies use to maintain or build their products. These challenges often occur when I join a new company or start a new class and over time, I learned that the best way to make myself viable as soon as possible was to not be afraid to ask questions. Although companies usually leverage popular technologies that I can learn online via YouTube or books, there are a lot of internal architectures, which are often more important to master than just knowing how to write code. Initially I had the fear of asking too many questions, but as I developed more experience, I learned that if you demonstrate your ability to find your own solutions before coming to them, they are always more than willing to lend a hand and help point you in the right direction. Never think that you can do everything by yourself and if you find yourself surrounded by other more talented and experienced people, never be afraid to learn and grow from them."
  },
  {
    "instruction": "Describe a project where you had to learn a new technology or programming language quickly. What was your process, and how did you ensure you grasped the core concepts effectively?",
    "response": "As a Master's student at San Jose State University pursuing a degree in Artificial Intelligence, one of my current goal is to conduct research. Since I was relatively new to the field and the research process, I found that the most impactful thing I did was to reach out and ask to work alongside a professor, which helped paved the way for me on how to choose and conduct research on relevant problems in the field. Although I had the direction, another issue for me was all the papers that I had to read. My reading skills have never been the best, let alone the amount of details that is compacted within every research paper. Fortunately, with modern advancements in AI technologies, I was able to leverage them to help me summarize the paper the core concepts of each paper. Having that tool allowed me to comprehend papers a lot easier since I was able to connect the information to the overarching goal presented."
  },
  {
    "instruction": "When you encounter a bug or an unexpected issue in your code, walk me through your debugging process.",
    "response": "I like to start my debugging process by uncovering the core issues. Usually I make sure to handle any exceptions that could occur, but often it's not clear where they happen. In order to determine the origin of the issue, I will either just add print statements throughout the process or use a debugger to identify the cause. Since I work alongside other engineers, it's often a possibility that the issue is not in my work but theirs. However, since I don't like to bother others unless necessary, I typically spend some time determining whether or not if I was the cause of the issue. With the advancements in AI technologies these days, problems are often solvable with a simple query, but with those that aren't so fortunate, I often take the code that's breaking, and rebuild it from as simplistic as possible and adding the necessary functionalities until the bug reappears."
  },
  {
    "instruction": "How do you stay up-to-date with new technologies and industry trends? What resources do you find most valuable?",
    "response": "My method of staying up to date on the latest technologies involves subscribing and following important articles, forums, and especially social media. Over the years, I have tuned my feed algorithms on X, Instagram, and TikTok to suggest feeds from influential engineers and creators that share the latest and underrated technologies in all fields. In my experience thus far, I found that word of mouth is often the best way to learn these technologies. By being surrounded by like minded people, we often share what we read that are of interest and it's through these conversations I often learn about things that I may have missed."
  },
  {
    "instruction": "Describe a time you had to make a significant technical design decision. What factors did you consider, and what was the impact of your choice?",
    "response": "For my current role as Full Stack Developer at Akamai Technologies, I'm responsible for the maintaining and constant development of our internal web platform, making it important for me to decide how to properly architect a solution (e.g. a new tool). The biggest factor I consider is maintainability, since in a fast pace environment, requirements often change and projects shift between owners, making it very important that the code being developed is readable and workable. Due to this priority, development of new solutions are often slow, but it's a worthy trade off for fast releases as new features are requested."
  },
  {
    "instruction": "How do you handle disagreements or conflicts within a team, especially when they involve technical approaches?",
    "response": "When there is a disagreement within a team, it's very important to understand the source of where the disagreement derives from, especially when discussing technical approaches. I would understand why both parties prefer their approach and either choose the outright best approach or find a solution that could potentially combine them. If I don not have that kind of executive power, I would bring in a more senior member and get their input on the situation."
  },
  {
    "instruction": "How do you prefer to give and receive feedback? Can you give an example of a time you received constructive criticism and how you acted on it?",
    "response": "I prefer to get my feedback directly with no filter. In a fast paced professional environment, I found it inefficient to have others find way to soften their criticism. If they have a problem, they should tell me what and why. I think it's ok to go through a team lead or something if one feels uncomfortable, but I will never reject criticism as long as it's justified. While working on a project with another engineer, they would often reject or comment on my PR simply because they didn't like the way I coded. Initially I found his comments annoying, but as he explained why his approach is better long term, I understood and incorporated it into my own coding, making my work more maintainable for others in the future."
  },
  {
    "instruction": "What's your ideal team environment like? What qualities do you look for in teammates?",
    "response": "I want to surround myself with people more talented than I am. If I ever feel like I am the best engineer in the team, that is when I know it is time for me to find different opportunities. In a field that evolves quickly, it's important that I am surrounded by people who are as committed as me in learning the latest technologies and talented enough to find methods to integrate it into current solutions."
  },
  {
    "instruction": "How do you collaborate on code with others? Are you familiar with version control systems like Git, and if so, how do you use them effectively in a team setting?",
    "response": "Everything I do goes through Git. Over my 5 years of programming, I've realized that regardless of team size, the best way to utilize it is the following. All engineers making changes will make them on their own branch. If someone wants to test a branch, they will pull it onto their local system and work with it there. Anyone who touches code that impacts other code should thoroughly test their changes to avoid breaking anything. The biggest difference I found between using Git in a small team and large team is the merging process. In a small team, there is usually no review and people just push their changes after they tested. In bigger teams, there is a whole review process to ensure everything is working before anything is merged."
  },
  {
    "instruction": "What excites you most about working as an engineer?",
    "response": "The ability to create things from scratch and the ever evolving landscape that is engineering is why I chose this career. Although it could be tiring at times to always have to stay up to date on the latest technologies, it's what keeps the field refreshing."
  },
  {
    "instruction": "Where do you see yourself in your engineering career in the next three to five years?",
    "response": "Currently I'm working as full stack developer, but I look forward to my transition into AR technologies. I've always been interested in how the virtual and physical can coexist and I believe that AR is the solution. I'm excited to one day have the opportunity to contribute to its development and place in everyone's life."
  },
  {
    "instruction": "What kind of challenges are you looking for in your next role?",
    "response": "I'm looking for one that will allow me to face the challenges of working on consumer products. Currently my tools are only being utilized by the members of my team, which is not small, but nothing compared to the scale of products that are being used by millions world wide."
  },
  {
    "instruction": "What are your strengths as an engineer? What about areas where you'd like to develop further?",
    "response": "I'm very capable at learning and always hungry to improve my abilities. From obtaining my bachelors in 2 years to pursuing my Masters while working full time, I am very capable of handling pressure and "
  },
  {
    "instruction": "How do you prioritize your work when you have multiple tasks or projects with competing deadlines?",
    "response": "When faced with multiple tasks and competing deadlines, my first step is to get a clear understanding of the urgency and impact of each item. I'll typically use a framework like Eisenhower Matrix (Urgent/Important) or discuss with my team lead/product manager to clarify priorities. I also consider dependencies – are there tasks that unblock others? I break down larger tasks into smaller, manageable chunks, which makes them less daunting and easier to track progress. I try to avoid context switching too frequently, preferring to focus on completing one high-priority task before moving to the next. If a deadline seems impossible to meet, I communicate proactively and early, explaining the situation and offering alternative solutions or compromises. Regular re-evaluation of priorities is also key, as circumstances can change rapidly."
  },
  {
    "instruction": "Describe a situation where you had to adapt to a significant change in project requirements or team direction.",
    "response": "On a recent project, we were about halfway through developing a new user authentication system when the company's security policy was updated, introducing a new requirement for multi-factor authentication (MFA) that was more stringent than initially planned. This was a significant shift that impacted our architectural choices and timelines. My initial reaction was to assess the scope of the change and its implications for our current design and estimated effort. I immediately raised the flag with the team lead and product manager, outlining the new requirements and proposing several technical approaches for integrating MFA, each with its own pros and cons (e.g., using a third-party service vs. building in-house). We had to pivot quickly, re-evaluate our backlog, and adjust our sprint plan. I adapted by re-prioritizing my tasks, learning about the chosen MFA solution, and actively collaborating with the security team to ensure compliance. While challenging, the team adapted well, and we successfully delivered a more secure system, albeit with a slightly adjusted timeline, which was communicated transparently to stakeholders."
  },
  {
    "instruction": "What questions do you have for me about our team, our work, or our engineering culture?",
    "response": "I have a few questions! First, what's a typical day like for an engineer on this team? I'm curious about the balance between coding, meetings, and collaboration. Second, could you describe the team's approach to technical debt and refactoring? How is that prioritized against new feature development? Finally, what does success look like for an engineer on this team in their first 6-12 months? What are the key milestones or contributions you'd hope to see?"
  }
]